"use strict";
/**
 * CMS
 * CMS Service API provides access to CMS entities and supports CMS use-cases
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = 'https://learned-stone-189802.appspot.com/api'.replace(/\/+$/, '');
var BaseAPI = /** @class */ (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * AuthApi - fetch parameter creator
 */
exports.AuthApiFetchParamCreator = {
    /**
     *
     * @summary Authorize as a user to get an access token
     * @param body
     */
    authUser: function (params, options) {
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling authUser');
        }
        var baseUrl = "/auth/user";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'POST' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AuthApi - functional programming interface
 */
exports.AuthApiFp = {
    /**
     *
     * @summary Authorize as a user to get an access token
     * @param body
     */
    authUser: function (params, options) {
        var fetchArgs = exports.AuthApiFetchParamCreator.authUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AuthApi - object-oriented interface
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Authorize as a user to get an access token
     * @param body
     */
    AuthApi.prototype.authUser = function (params, options) {
        return exports.AuthApiFp.authUser(params, options)(this.fetch, this.basePath);
    };
    return AuthApi;
}(BaseAPI));
exports.AuthApi = AuthApi;
/**
 * AuthApi - factory interface
 */
exports.AuthApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Authorize as a user to get an access token
         * @param body
         */
        authUser: function (params, options) {
            return exports.AuthApiFp.authUser(params, options)(fetch, basePath);
        },
    };
};
/**
 * CommentsApi - fetch parameter creator
 */
exports.CommentsApiFetchParamCreator = {
    /**
     *
     * @summary Create a comment
     * @param body
     */
    createComment: function (params, options) {
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling createComment');
        }
        var baseUrl = "/comments";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'POST' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Delete a comment
     * @param id
     */
    deleteComment: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling deleteComment');
        }
        var baseUrl = "/comments/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'DELETE' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get a comment
     * @param id
     */
    getComment: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling getComment');
        }
        var baseUrl = "/comments/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get all comments
     */
    getComments: function (options) {
        var baseUrl = "/comments";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Update a comment
     * @param id
     * @param body
     */
    updateComment: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling updateComment');
        }
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling updateComment');
        }
        var baseUrl = "/comments/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'PUT' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CommentsApi - functional programming interface
 */
exports.CommentsApiFp = {
    /**
     *
     * @summary Create a comment
     * @param body
     */
    createComment: function (params, options) {
        var fetchArgs = exports.CommentsApiFetchParamCreator.createComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Delete a comment
     * @param id
     */
    deleteComment: function (params, options) {
        var fetchArgs = exports.CommentsApiFetchParamCreator.deleteComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get a comment
     * @param id
     */
    getComment: function (params, options) {
        var fetchArgs = exports.CommentsApiFetchParamCreator.getComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get all comments
     */
    getComments: function (options) {
        var fetchArgs = exports.CommentsApiFetchParamCreator.getComments(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Update a comment
     * @param id
     * @param body
     */
    updateComment: function (params, options) {
        var fetchArgs = exports.CommentsApiFetchParamCreator.updateComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CommentsApi - object-oriented interface
 */
var CommentsApi = /** @class */ (function (_super) {
    __extends(CommentsApi, _super);
    function CommentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a comment
     * @param body
     */
    CommentsApi.prototype.createComment = function (params, options) {
        return exports.CommentsApiFp.createComment(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete a comment
     * @param id
     */
    CommentsApi.prototype.deleteComment = function (params, options) {
        return exports.CommentsApiFp.deleteComment(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get a comment
     * @param id
     */
    CommentsApi.prototype.getComment = function (params, options) {
        return exports.CommentsApiFp.getComment(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all comments
     */
    CommentsApi.prototype.getComments = function (options) {
        return exports.CommentsApiFp.getComments(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update a comment
     * @param id
     * @param body
     */
    CommentsApi.prototype.updateComment = function (params, options) {
        return exports.CommentsApiFp.updateComment(params, options)(this.fetch, this.basePath);
    };
    return CommentsApi;
}(BaseAPI));
exports.CommentsApi = CommentsApi;
/**
 * CommentsApi - factory interface
 */
exports.CommentsApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Create a comment
         * @param body
         */
        createComment: function (params, options) {
            return exports.CommentsApiFp.createComment(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete a comment
         * @param id
         */
        deleteComment: function (params, options) {
            return exports.CommentsApiFp.deleteComment(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a comment
         * @param id
         */
        getComment: function (params, options) {
            return exports.CommentsApiFp.getComment(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all comments
         */
        getComments: function (options) {
            return exports.CommentsApiFp.getComments(options)(fetch, basePath);
        },
        /**
         *
         * @summary Update a comment
         * @param id
         * @param body
         */
        updateComment: function (params, options) {
            return exports.CommentsApiFp.updateComment(params, options)(fetch, basePath);
        },
    };
};
/**
 * PostsApi - fetch parameter creator
 */
exports.PostsApiFetchParamCreator = {
    /**
     *
     * @summary Create a post
     * @param body
     */
    createPost: function (params, options) {
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling createPost');
        }
        var baseUrl = "/posts";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'POST' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Delete a post
     * @param id
     */
    deletePost: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling deletePost');
        }
        var baseUrl = "/posts/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'DELETE' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get a post
     * @param id
     */
    getPost: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling getPost');
        }
        var baseUrl = "/posts/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get a post (by slug)
     * @param slug
     */
    getPostBySlug: function (params, options) {
        // verify required parameter "slug" is set
        if (params['slug'] == null) {
            throw new Error('Missing required parameter slug when calling getPostBySlug');
        }
        var baseUrl = "/posts/slug/{slug}".replace("{" + 'slug' + "}", "" + params['slug']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get all comments by post
     * @param id
     */
    getPostComments: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling getPostComments');
        }
        var baseUrl = "/posts/{id}/comments".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get all posts
     * @param includeUnPublished when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
     */
    getPosts: function (params, options) {
        var baseUrl = "/posts";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            includeUnPublished: params['includeUnPublished'],
        });
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Update a post
     * @param id
     * @param body
     */
    updatePost: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling updatePost');
        }
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling updatePost');
        }
        var baseUrl = "/posts/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'PUT' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PostsApi - functional programming interface
 */
exports.PostsApiFp = {
    /**
     *
     * @summary Create a post
     * @param body
     */
    createPost: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.createPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Delete a post
     * @param id
     */
    deletePost: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.deletePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get a post
     * @param id
     */
    getPost: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.getPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get a post (by slug)
     * @param slug
     */
    getPostBySlug: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.getPostBySlug(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get all comments by post
     * @param id
     */
    getPostComments: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.getPostComments(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get all posts
     * @param includeUnPublished when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
     */
    getPosts: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.getPosts(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Update a post
     * @param id
     * @param body
     */
    updatePost: function (params, options) {
        var fetchArgs = exports.PostsApiFetchParamCreator.updatePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PostsApi - object-oriented interface
 */
var PostsApi = /** @class */ (function (_super) {
    __extends(PostsApi, _super);
    function PostsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a post
     * @param body
     */
    PostsApi.prototype.createPost = function (params, options) {
        return exports.PostsApiFp.createPost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete a post
     * @param id
     */
    PostsApi.prototype.deletePost = function (params, options) {
        return exports.PostsApiFp.deletePost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get a post
     * @param id
     */
    PostsApi.prototype.getPost = function (params, options) {
        return exports.PostsApiFp.getPost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get a post (by slug)
     * @param slug
     */
    PostsApi.prototype.getPostBySlug = function (params, options) {
        return exports.PostsApiFp.getPostBySlug(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all comments by post
     * @param id
     */
    PostsApi.prototype.getPostComments = function (params, options) {
        return exports.PostsApiFp.getPostComments(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all posts
     * @param includeUnPublished when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
     */
    PostsApi.prototype.getPosts = function (params, options) {
        return exports.PostsApiFp.getPosts(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update a post
     * @param id
     * @param body
     */
    PostsApi.prototype.updatePost = function (params, options) {
        return exports.PostsApiFp.updatePost(params, options)(this.fetch, this.basePath);
    };
    return PostsApi;
}(BaseAPI));
exports.PostsApi = PostsApi;
/**
 * PostsApi - factory interface
 */
exports.PostsApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Create a post
         * @param body
         */
        createPost: function (params, options) {
            return exports.PostsApiFp.createPost(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete a post
         * @param id
         */
        deletePost: function (params, options) {
            return exports.PostsApiFp.deletePost(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a post
         * @param id
         */
        getPost: function (params, options) {
            return exports.PostsApiFp.getPost(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a post (by slug)
         * @param slug
         */
        getPostBySlug: function (params, options) {
            return exports.PostsApiFp.getPostBySlug(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all comments by post
         * @param id
         */
        getPostComments: function (params, options) {
            return exports.PostsApiFp.getPostComments(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all posts
         * @param includeUnPublished when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
         */
        getPosts: function (params, options) {
            return exports.PostsApiFp.getPosts(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update a post
         * @param id
         * @param body
         */
        updatePost: function (params, options) {
            return exports.PostsApiFp.updatePost(params, options)(fetch, basePath);
        },
    };
};
/**
 * SetupApi - fetch parameter creator
 */
exports.SetupApiFetchParamCreator = {
    /**
     *
     * @summary Check if application is setup
     */
    isSetup: function (options) {
        var baseUrl = "/is-setup";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Setup the application
     * @param body
     */
    setup: function (params, options) {
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling setup');
        }
        var baseUrl = "/setup";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'POST' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SetupApi - functional programming interface
 */
exports.SetupApiFp = {
    /**
     *
     * @summary Check if application is setup
     */
    isSetup: function (options) {
        var fetchArgs = exports.SetupApiFetchParamCreator.isSetup(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Setup the application
     * @param body
     */
    setup: function (params, options) {
        var fetchArgs = exports.SetupApiFetchParamCreator.setup(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * SetupApi - object-oriented interface
 */
var SetupApi = /** @class */ (function (_super) {
    __extends(SetupApi, _super);
    function SetupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Check if application is setup
     */
    SetupApi.prototype.isSetup = function (options) {
        return exports.SetupApiFp.isSetup(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Setup the application
     * @param body
     */
    SetupApi.prototype.setup = function (params, options) {
        return exports.SetupApiFp.setup(params, options)(this.fetch, this.basePath);
    };
    return SetupApi;
}(BaseAPI));
exports.SetupApi = SetupApi;
/**
 * SetupApi - factory interface
 */
exports.SetupApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Check if application is setup
         */
        isSetup: function (options) {
            return exports.SetupApiFp.isSetup(options)(fetch, basePath);
        },
        /**
         *
         * @summary Setup the application
         * @param body
         */
        setup: function (params, options) {
            return exports.SetupApiFp.setup(params, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - fetch parameter creator
 */
exports.UsersApiFetchParamCreator = {
    /**
     *
     * @summary Create a user
     * @param body
     */
    createUser: function (params, options) {
        // verify required parameter "body" is set
        if (params['body'] == null) {
            throw new Error('Missing required parameter body when calling createUser');
        }
        var baseUrl = "/users";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'POST' }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { 'Content-Type': 'application/json' };
        if (params['body']) {
            fetchOptions.body = JSON.stringify(params['body'] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Delete a user
     * @param id
     */
    deleteUser: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling deleteUser');
        }
        var baseUrl = "/users/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'DELETE' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get a user
     * @param id
     */
    getUser: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling getUser');
        }
        var baseUrl = "/users/{id}".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get all comments by user
     * @param id
     */
    getUserComments: function (params, options) {
        // verify required parameter "id" is set
        if (params['id'] == null) {
            throw new Error('Missing required parameter id when calling getUserComments');
        }
        var baseUrl = "/users/{id}/comments".replace("{" + 'id' + "}", "" + params['id']);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: 'GET' }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UsersApi - functional programming interface
 */
exports.UsersApiFp = {
    /**
     *
     * @summary Create a user
     * @param body
     */
    createUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.createUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Delete a user
     * @param id
     */
    deleteUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.deleteUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get a user
     * @param id
     */
    getUser: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.getUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get all comments by user
     * @param id
     */
    getUserComments: function (params, options) {
        var fetchArgs = exports.UsersApiFetchParamCreator.getUserComments(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UsersApi - object-oriented interface
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a user
     * @param body
     */
    UsersApi.prototype.createUser = function (params, options) {
        return exports.UsersApiFp.createUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete a user
     * @param id
     */
    UsersApi.prototype.deleteUser = function (params, options) {
        return exports.UsersApiFp.deleteUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get a user
     * @param id
     */
    UsersApi.prototype.getUser = function (params, options) {
        return exports.UsersApiFp.getUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all comments by user
     * @param id
     */
    UsersApi.prototype.getUserComments = function (params, options) {
        return exports.UsersApiFp.getUserComments(params, options)(this.fetch, this.basePath);
    };
    return UsersApi;
}(BaseAPI));
exports.UsersApi = UsersApi;
/**
 * UsersApi - factory interface
 */
exports.UsersApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Create a user
         * @param body
         */
        createUser: function (params, options) {
            return exports.UsersApiFp.createUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete a user
         * @param id
         */
        deleteUser: function (params, options) {
            return exports.UsersApiFp.deleteUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a user
         * @param id
         */
        getUser: function (params, options) {
            return exports.UsersApiFp.getUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all comments by user
         * @param id
         */
        getUserComments: function (params, options) {
            return exports.UsersApiFp.getUserComments(params, options)(fetch, basePath);
        },
    };
};
