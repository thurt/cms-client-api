/**
 * CMS
 * CMS Service API provides access to CMS entities and supports CMS use-cases
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * CmsApi - fetch parameter creator
 */
exports.CmsApiFetchParamCreator = {
    /**
     *
     * @summary Auth Use-Cases
     * @param body
     */
    authUser: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling authUser");
        }
        var baseUrl = "/auth/user";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Comment CRUD
     * @param body
     */
    createComment: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createComment");
        }
        var baseUrl = "/comments";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Post CRUD
     * @param body
     */
    createPost: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createPost");
        }
        var baseUrl = "/posts";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary User CRD
     * @param body
     */
    createUser: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling createUser");
        }
        var baseUrl = "/users";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    deleteComment: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling deleteComment");
        }
        var baseUrl = "/comments/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    deletePost: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling deletePost");
        }
        var baseUrl = "/posts/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    deleteUser: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling deleteUser");
        }
        var baseUrl = "/users/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    getComment: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getComment");
        }
        var baseUrl = "/comments/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Comment Use-Cases
     */
    getComments: function (options) {
        var baseUrl = "/comments";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    getPost: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getPost");
        }
        var baseUrl = "/posts/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Post Use-Cases
     * @param id
     */
    getPostComments: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getPostComments");
        }
        var baseUrl = "/posts/{id}/comments"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     */
    getPosts: function (options) {
        var baseUrl = "/posts";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    getUser: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getUser");
        }
        var baseUrl = "/users/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary User Use-Cases
     * @param id
     */
    getUserComments: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getUserComments");
        }
        var baseUrl = "/users/{id}/comments"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     */
    isSetup: function (options) {
        var baseUrl = "/is-setup";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Setup
     * @param body
     */
    setup: function (params, options) {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling setup");
        }
        var baseUrl = "/setup";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     */
    unPublishPost: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling unPublishPost");
        }
        var baseUrl = "/posts/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @param id
     * @param body
     */
    updateComment: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling updateComment");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling updateComment");
        }
        var baseUrl = "/comments/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CmsApi - functional programming interface
 */
exports.CmsApiFp = {
    /**
     *
     * @summary Auth Use-Cases
     * @param body
     */
    authUser: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.authUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Comment CRUD
     * @param body
     */
    createComment: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.createComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Post CRUD
     * @param body
     */
    createPost: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.createPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary User CRD
     * @param body
     */
    createUser: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.createUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    deleteComment: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.deleteComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    deletePost: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.deletePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    deleteUser: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.deleteUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    getComment: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Comment Use-Cases
     */
    getComments: function (options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getComments(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    getPost: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Post Use-Cases
     * @param id
     */
    getPostComments: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getPostComments(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     */
    getPosts: function (options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getPosts(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    getUser: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary User Use-Cases
     * @param id
     */
    getUserComments: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.getUserComments(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     */
    isSetup: function (options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.isSetup(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Setup
     * @param body
     */
    setup: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.setup(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     */
    unPublishPost: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.unPublishPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @param id
     * @param body
     */
    updateComment: function (params, options) {
        var fetchArgs = exports.CmsApiFetchParamCreator.updateComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CmsApi - object-oriented interface
 */
var CmsApi = (function (_super) {
    __extends(CmsApi, _super);
    function CmsApi() {
        _super.apply(this, arguments);
    }
    /**
     *
     * @summary Auth Use-Cases
     * @param body
     */
    CmsApi.prototype.authUser = function (params, options) {
        return exports.CmsApiFp.authUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Comment CRUD
     * @param body
     */
    CmsApi.prototype.createComment = function (params, options) {
        return exports.CmsApiFp.createComment(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Post CRUD
     * @param body
     */
    CmsApi.prototype.createPost = function (params, options) {
        return exports.CmsApiFp.createPost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary User CRD
     * @param body
     */
    CmsApi.prototype.createUser = function (params, options) {
        return exports.CmsApiFp.createUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.deleteComment = function (params, options) {
        return exports.CmsApiFp.deleteComment(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.deletePost = function (params, options) {
        return exports.CmsApiFp.deletePost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.deleteUser = function (params, options) {
        return exports.CmsApiFp.deleteUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.getComment = function (params, options) {
        return exports.CmsApiFp.getComment(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Comment Use-Cases
     */
    CmsApi.prototype.getComments = function (options) {
        return exports.CmsApiFp.getComments(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.getPost = function (params, options) {
        return exports.CmsApiFp.getPost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Post Use-Cases
     * @param id
     */
    CmsApi.prototype.getPostComments = function (params, options) {
        return exports.CmsApiFp.getPostComments(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     */
    CmsApi.prototype.getPosts = function (options) {
        return exports.CmsApiFp.getPosts(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.getUser = function (params, options) {
        return exports.CmsApiFp.getUser(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary User Use-Cases
     * @param id
     */
    CmsApi.prototype.getUserComments = function (params, options) {
        return exports.CmsApiFp.getUserComments(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     */
    CmsApi.prototype.isSetup = function (options) {
        return exports.CmsApiFp.isSetup(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Setup
     * @param body
     */
    CmsApi.prototype.setup = function (params, options) {
        return exports.CmsApiFp.setup(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     */
    CmsApi.prototype.unPublishPost = function (params, options) {
        return exports.CmsApiFp.unPublishPost(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param id
     * @param body
     */
    CmsApi.prototype.updateComment = function (params, options) {
        return exports.CmsApiFp.updateComment(params, options)(this.fetch, this.basePath);
    };
    return CmsApi;
}(BaseAPI));
exports.CmsApi = CmsApi;
;
/**
 * CmsApi - factory interface
 */
exports.CmsApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary Auth Use-Cases
         * @param body
         */
        authUser: function (params, options) {
            return exports.CmsApiFp.authUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Comment CRUD
         * @param body
         */
        createComment: function (params, options) {
            return exports.CmsApiFp.createComment(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Post CRUD
         * @param body
         */
        createPost: function (params, options) {
            return exports.CmsApiFp.createPost(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary User CRD
         * @param body
         */
        createUser: function (params, options) {
            return exports.CmsApiFp.createUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        deleteComment: function (params, options) {
            return exports.CmsApiFp.deleteComment(params, options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        deletePost: function (params, options) {
            return exports.CmsApiFp.deletePost(params, options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        deleteUser: function (params, options) {
            return exports.CmsApiFp.deleteUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        getComment: function (params, options) {
            return exports.CmsApiFp.getComment(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Comment Use-Cases
         */
        getComments: function (options) {
            return exports.CmsApiFp.getComments(options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        getPost: function (params, options) {
            return exports.CmsApiFp.getPost(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Post Use-Cases
         * @param id
         */
        getPostComments: function (params, options) {
            return exports.CmsApiFp.getPostComments(params, options)(fetch, basePath);
        },
        /**
         *
         */
        getPosts: function (options) {
            return exports.CmsApiFp.getPosts(options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        getUser: function (params, options) {
            return exports.CmsApiFp.getUser(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary User Use-Cases
         * @param id
         */
        getUserComments: function (params, options) {
            return exports.CmsApiFp.getUserComments(params, options)(fetch, basePath);
        },
        /**
         *
         */
        isSetup: function (options) {
            return exports.CmsApiFp.isSetup(options)(fetch, basePath);
        },
        /**
         *
         * @summary Setup
         * @param body
         */
        setup: function (params, options) {
            return exports.CmsApiFp.setup(params, options)(fetch, basePath);
        },
        /**
         *
         * @param id
         */
        unPublishPost: function (params, options) {
            return exports.CmsApiFp.unPublishPost(params, options)(fetch, basePath);
        },
        /**
         *
         * @param id
         * @param body
         */
        updateComment: function (params, options) {
            return exports.CmsApiFp.updateComment(params, options)(fetch, basePath);
        },
    };
};
