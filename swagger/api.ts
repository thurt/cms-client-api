/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * CMS
 * CMS Service API provides access to CMS entities and supports CMS use-cases
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CmsAccessToken
 */
export interface CmsAccessToken {
    /**
     * 
     * @type {string}
     * @memberof CmsAccessToken
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsAccessToken
     */
    tokenType?: string;
    /**
     * 
     * @type {number}
     * @memberof CmsAccessToken
     */
    expiresIn?: number;
}

/**
 * 
 * @export
 * @interface CmsAuthUserRequest
 */
export interface CmsAuthUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CmsAuthUserRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsAuthUserRequest
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface CmsComment
 */
export interface CmsComment {
    /**
     * 
     * @type {number}
     * @memberof CmsComment
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CmsComment
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsComment
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsComment
     */
    lastEdited?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsComment
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsComment
     */
    postId?: string;
}

/**
 * 
 * @export
 * @interface CmsCommentRequest
 */
export interface CmsCommentRequest {
    /**
     * 
     * @type {number}
     * @memberof CmsCommentRequest
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface CmsCreateCommentRequest
 */
export interface CmsCreateCommentRequest {
    /**
     * 
     * @type {string}
     * @memberof CmsCreateCommentRequest
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsCreateCommentRequest
     */
    userId?: string;
    /**
     * 
     * @type {number}
     * @memberof CmsCreateCommentRequest
     */
    postId?: number;
}

/**
 * 
 * @export
 * @interface CmsCreatePostRequest
 */
export interface CmsCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof CmsCreatePostRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsCreatePostRequest
     */
    content?: string;
}

/**
 * 
 * @export
 * @interface CmsCreateUserRequest
 */
export interface CmsCreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CmsCreateUserRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsCreateUserRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsCreateUserRequest
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface CmsPost
 */
export interface CmsPost {
    /**
     * 
     * @type {number}
     * @memberof CmsPost
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CmsPost
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsPost
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsPost
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsPost
     */
    lastEdited?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CmsPost
     */
    published?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CmsPost
     */
    slug?: string;
}

/**
 * 
 * @export
 * @interface CmsPostRequest
 */
export interface CmsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof CmsPostRequest
     */
    id?: number;
}

/**
 * 
 * @export
 * @interface CmsUpdateCommentRequest
 */
export interface CmsUpdateCommentRequest {
    /**
     * 
     * @type {number}
     * @memberof CmsUpdateCommentRequest
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CmsUpdateCommentRequest
     */
    content?: string;
}

/**
 * 
 * @export
 * @interface CmsUpdatePostRequest
 */
export interface CmsUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof CmsUpdatePostRequest
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CmsUpdatePostRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsUpdatePostRequest
     */
    content?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CmsUpdatePostRequest
     */
    published?: boolean;
}

/**
 * 
 * @export
 * @interface CmsUser
 */
export interface CmsUser {
    /**
     * 
     * @type {string}
     * @memberof CmsUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsUser
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof CmsUser
     */
    lastActive?: string;
    /**
     * 
     * @type {CmsUserRole}
     * @memberof CmsUser
     */
    role?: CmsUserRole;
}

/**
 * 
 * @export
 * @interface CmsUserPassword
 */
export interface CmsUserPassword {
    /**
     * 
     * @type {string}
     * @memberof CmsUserPassword
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface CmsUserRequest
 */
export interface CmsUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CmsUserRequest
     */
    id?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum CmsUserRole {
    UNKNOWN = <any> 'UNKNOWN',
    ADMIN = <any> 'ADMIN',
    USER = <any> 'USER'
}

/**
 * Wrapper message for `bool`.  The JSON representation for `BoolValue` is JSON `true` and `false`.
 * @export
 * @interface ProtobufBoolValue
 */
export interface ProtobufBoolValue {
    /**
     * The bool value.
     * @type {boolean}
     * @memberof ProtobufBoolValue
     */
    value?: boolean;
}

/**
 * service Foo {       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The JSON representation for `Empty` is empty JSON object `{}`.
 * @export
 * @interface ProtobufEmpty
 */
export interface ProtobufEmpty {
}


/**
 * CmsApi - fetch parameter creator
 * @export
 */
export const CmsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize as a user to get an access token
         * @param {CmsAuthUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUser(body: CmsAuthUserRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authUser.');
            }
            const localVarPath = `/auth/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsAuthUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a comment
         * @param {CmsCreateCommentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(body: CmsCreateCommentRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createComment.');
            }
            const localVarPath = `/comments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsCreateCommentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a post
         * @param {CmsCreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(body: CmsCreatePostRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPost.');
            }
            const localVarPath = `/posts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsCreatePostRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {CmsCreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: CmsCreateUserRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsCreateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteComment.');
            }
            const localVarPath = `/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePost.');
            }
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getComment.');
            }
            const localVarPath = `/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments(options: any = {}): FetchArgs {
            const localVarPath = `/comments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPost.');
            }
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all comments by post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostComments(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPostComments.');
            }
            const localVarPath = `/posts/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all posts
         * @param {boolean} [includeUnPublished] when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(includeUnPublished?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/posts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeUnPublished !== undefined) {
                localVarQueryParameter['includeUnPublished'] = includeUnPublished;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all comments by user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserComments(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserComments.');
            }
            const localVarPath = `/users/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if application is setup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isSetup(options: any = {}): FetchArgs {
            const localVarPath = `/is-setup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Setup the application
         * @param {CmsCreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setup(body: CmsCreateUserRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setup.');
            }
            const localVarPath = `/setup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsCreateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a comment
         * @param {number} id 
         * @param {CmsUpdateCommentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(id: number, body: CmsUpdateCommentRequest, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateComment.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateComment.');
            }
            const localVarPath = `/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsUpdateCommentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a post
         * @param {number} id 
         * @param {CmsUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(id: number, body: CmsUpdatePostRequest, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePost.');
            }
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CmsUpdatePostRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CmsApi - functional programming interface
 * @export
 */
export const CmsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize as a user to get an access token
         * @param {CmsAuthUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUser(body: CmsAuthUserRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsAccessToken> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).authUser(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a comment
         * @param {CmsCreateCommentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(body: CmsCreateCommentRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsCommentRequest> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).createComment(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a post
         * @param {CmsCreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(body: CmsCreatePostRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsPostRequest> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).createPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {CmsCreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: CmsCreateUserRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsUserRequest> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufEmpty> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).deleteComment(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufEmpty> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).deletePost(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufEmpty> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).deleteUser(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsComment> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getComment(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsComment> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getComments(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsPost> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getPost(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all comments by post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostComments(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsComment> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getPostComments(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all posts
         * @param {boolean} [includeUnPublished] when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(includeUnPublished?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsPost> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getPosts(includeUnPublished, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsUser> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getUser(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all comments by user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserComments(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsComment> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).getUserComments(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Check if application is setup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isSetup(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufBoolValue> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).isSetup(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Setup the application
         * @param {CmsCreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setup(body: CmsCreateUserRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CmsUserRequest> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).setup(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a comment
         * @param {number} id 
         * @param {CmsUpdateCommentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(id: number, body: CmsUpdateCommentRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufEmpty> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).updateComment(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a post
         * @param {number} id 
         * @param {CmsUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(id: number, body: CmsUpdatePostRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufEmpty> {
            const localVarFetchArgs = CmsApiFetchParamCreator(configuration).updatePost(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CmsApi - factory interface
 * @export
 */
export const CmsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Authorize as a user to get an access token
         * @param {CmsAuthUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authUser(body: CmsAuthUserRequest, options?: any) {
            return CmsApiFp(configuration).authUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a comment
         * @param {CmsCreateCommentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(body: CmsCreateCommentRequest, options?: any) {
            return CmsApiFp(configuration).createComment(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a post
         * @param {CmsCreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(body: CmsCreatePostRequest, options?: any) {
            return CmsApiFp(configuration).createPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a user
         * @param {CmsCreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: CmsCreateUserRequest, options?: any) {
            return CmsApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(id: number, options?: any) {
            return CmsApiFp(configuration).deleteComment(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(id: number, options?: any) {
            return CmsApiFp(configuration).deletePost(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options?: any) {
            return CmsApiFp(configuration).deleteUser(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(id: number, options?: any) {
            return CmsApiFp(configuration).getComment(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments(options?: any) {
            return CmsApiFp(configuration).getComments(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(id: number, options?: any) {
            return CmsApiFp(configuration).getPost(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all comments by post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostComments(id: number, options?: any) {
            return CmsApiFp(configuration).getPostComments(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all posts
         * @param {boolean} [includeUnPublished] when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(includeUnPublished?: boolean, options?: any) {
            return CmsApiFp(configuration).getPosts(includeUnPublished, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any) {
            return CmsApiFp(configuration).getUser(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all comments by user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserComments(id: string, options?: any) {
            return CmsApiFp(configuration).getUserComments(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Check if application is setup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isSetup(options?: any) {
            return CmsApiFp(configuration).isSetup(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Setup the application
         * @param {CmsCreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setup(body: CmsCreateUserRequest, options?: any) {
            return CmsApiFp(configuration).setup(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a comment
         * @param {number} id 
         * @param {CmsUpdateCommentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(id: number, body: CmsUpdateCommentRequest, options?: any) {
            return CmsApiFp(configuration).updateComment(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a post
         * @param {number} id 
         * @param {CmsUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(id: number, body: CmsUpdatePostRequest, options?: any) {
            return CmsApiFp(configuration).updatePost(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * CmsApi - object-oriented interface
 * @export
 * @class CmsApi
 * @extends {BaseAPI}
 */
export class CmsApi extends BaseAPI {
    /**
     * 
     * @summary Authorize as a user to get an access token
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public authUser(body: CmsAuthUserRequest, options?: any) {
        return CmsApiFp(this.configuration).authUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a comment
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public createComment(body: CmsCreateCommentRequest, options?: any) {
        return CmsApiFp(this.configuration).createComment(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a post
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public createPost(body: CmsCreatePostRequest, options?: any) {
        return CmsApiFp(this.configuration).createPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a user
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public createUser(body: CmsCreateUserRequest, options?: any) {
        return CmsApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a comment
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public deleteComment(id: number, options?: any) {
        return CmsApiFp(this.configuration).deleteComment(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a post
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public deletePost(id: number, options?: any) {
        return CmsApiFp(this.configuration).deletePost(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a user
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public deleteUser(id: string, options?: any) {
        return CmsApiFp(this.configuration).deleteUser(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a comment
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getComment(id: number, options?: any) {
        return CmsApiFp(this.configuration).getComment(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getComments(options?: any) {
        return CmsApiFp(this.configuration).getComments(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a post
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getPost(id: number, options?: any) {
        return CmsApiFp(this.configuration).getPost(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all comments by post
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getPostComments(id: number, options?: any) {
        return CmsApiFp(this.configuration).getPostComments(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all posts
     * @param {} [includeUnPublished] when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getPosts(includeUnPublished?: boolean, options?: any) {
        return CmsApiFp(this.configuration).getPosts(includeUnPublished, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a user
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getUser(id: string, options?: any) {
        return CmsApiFp(this.configuration).getUser(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all comments by user
     * @param {} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public getUserComments(id: string, options?: any) {
        return CmsApiFp(this.configuration).getUserComments(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Check if application is setup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public isSetup(options?: any) {
        return CmsApiFp(this.configuration).isSetup(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Setup the application
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public setup(body: CmsCreateUserRequest, options?: any) {
        return CmsApiFp(this.configuration).setup(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a comment
     * @param {} id 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public updateComment(id: number, body: CmsUpdateCommentRequest, options?: any) {
        return CmsApiFp(this.configuration).updateComment(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a post
     * @param {} id 
     * @param {} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CmsApi
     */
    public updatePost(id: number, body: CmsUpdatePostRequest, options?: any) {
        return CmsApiFp(this.configuration).updatePost(id, body, options)(this.fetch, this.basePath);
    }

}

